#! /bin/bash
# Copyright (C) 2012-2013 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#

set -e

# go to the working directory
cd "$1"
shift

while [ -n "$1" ]; do 
    case "$1" in 
        --debug)
            set -x
            shift;
            ;;
        --distro-version)
            DISTRO_VERSION=$2
            shift; shift;
            ;;
        --gid)
            CHROOT_GID=$2
            shift; shift;
            ;;
        --gnupg-parentdir)
            # set home directory to real HOME for signing the source packaging
            CHROOT_HOME="${2}";
            shift; shift;
            ;;
        --help)
            echo "$0: Enable building a source package inside a chroot

    Usage: $0 WORKDIR --uid=UID --gid=GID --gnupg-parentdir=DIR --gnupg-keyid=KEYID --distro-version=version_from_distro [--ppa ppa_name]
    All parameters below are mandatory:
    - WORKDIR is the current package source directory (in tree)
    - uid is the uid owning the current source tree (used so that root don't own the new created files)
    - gid is the gid owning the current source tree (used so that root don't own the new created files)
    - gnupg-parentdir is the directory containing the .gnupg/ directory. Certainly $HOME for you.
    - gnupg-keyid is the keyid with which signing the source package.
    - distro-version is the latest version published to the distro
    - ppa is the optional ppa to add to the chroot


    Note that WORKDIR and gnupg-keyid should be bindmounted into the chroot.
    This will create a signed source package using bzr bd -S, after installing all build-deps, ran into the WORKDIR, with the correct permission.


    Example on how to run it with pbuilder (cowbuilder can be used with exactly the same parameters, replace pbuilder with cowbuilder):"'
    
    $ pbuilder --execute --distribution TARGET_DIST --bindmounts ${PWD} --bindmounts ${HOME} -- '$0' ${PWD} --gnupg-parentdir ${HOME} --uid $(id -u) --gid $(id -g) --gnupg-keyid E4AC208E'
            shift;
            exit 0
            ;;
        --gnupg-keyid)
            KEYID=$2
            shift; shift;
            ;;
        --ppa)
            PPA=$2
            shift; shift;
            ;;
        --uid)
            CHROOT_UID=$2
            shift; shift;
            ;;
        --*)
            echo "E: Unknown option [$1] was specified "
            exit 1;
            ;;
        *)
            break;
            ;;
    esac
done

if [ -z "$CHROOT_HOME" ] || [ -z "$CHROOT_UID" ] || [ -z "$CHROOT_GID" ]  || [ -z "KEYID" ]  || [ -z "DISTRO_VERSION" ] ; then
    echo "Every parameters is mandatory to run $0. Use --help for more info."
    exit 1
fi

HOME="$CHROOT_HOME"
export HOME;

apt-get update
apt-get -yq --force-yes dist-upgrade

# this isn't need (you should install them in the chroot), but easier for debugging
apt-get install pbuilder bzr-builddeb -yq --force-yes

# add the optional ppa and update from it
if [ -n "$PPA" ]; then
    apt-get -yq --force-yes install software-properties-common
    add-apt-repository -y ppa:$PPA
    apt-get update
fi

# install build-deps
. /usr/lib/pbuilder/pdebuild-checkparams
export PBCURRENTCOMMANDLINEOPERATION="pdebuild"
"$PBUILDERSATISFYDEPENDSCMD"-classic --force-version --continue-fail

# create the user similar to that used outside.
cmd_retry_exec () {
    # Tries to execute $@ $loop times with a delay of $delay between retries
    # before aborting
    loop=10
    delay=1
    set +e
    while [ $loop -gt 0 ]; do
        $@ && break
        loop=$((loop - 1))
        sleep $delay
    done
    set -e
}

# Workaround a bug where /etc/group or /etc/passwd are locked when several
# jobs run in parallel (LP: #1155510)
cmd_retry_exec groupadd -g $CHROOT_GID -o pbgroup
cmd_retry_exec useradd -g pbgroup -u $CHROOT_UID -d "${HOME}" -o pbuser

# build the source in split mode
if [ "$KEYID" == "testkey" ]; then
    CMD="bzr bd -S --split -- -us -uc -d -v$DISTRO_VERSION"
else
    CMD="bzr bd -S --split -- -k$KEYID -d -v$DISTRO_VERSION"
fi
echo "Creating source with $CMD"
echo "$CMD" | su -p pbuser;
