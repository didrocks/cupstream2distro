#! /usr/bin/python
""" Calculate autopilot pass rate
"""
# Copyright (C) 2012, Canonical Ltd (http://www.canonical.com/)
#
# Author: Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>
#
# This software is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
import sys
import argparse
import xml.etree.ElementTree as etree

BINDIR = os.path.dirname(__file__)


def parselog(path):
    """ Parse a JUnit log file and return the number of tests, and a list of
    failed tests

    :param path: path to an XML log file
    :return: (test count, [failed tests])
    """
    logging.debug('Parsing file: %s', path)

    if not os.path.exists(path):
        logging.error('File doesn\'t exists: %s', path)
        sys.exit(1)

    tree = etree.parse(path)
    root = tree.getroot()

    cases = root.findall('suites/suite/cases/case')

    testcount = 0
    skipcount = 0
    failed = []
    testcount = len(cases)

    for case in cases:
        skipped = case.find('skipped')
        classname = case.find('className')
        testname = case.find('testName')

        if 'true' in skipped:
            skipcount += 1

        stacktrace = case.find('errorStackTrace')
        if stacktrace is not None:
            failed.append(classname.text + "::" + testname.text)

    logging.debug("{}".format(failed))
    logging.debug("%d tests failed", (len(failed)))
    return (testcount, skipcount, failed)


def set_logging(debugmode=False):
    """Initialize logging"""
    logging.basicConfig(
        level=logging.DEBUG if debugmode else logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s"
        )
    logging.debug('Debug mode enabled')


def main():
    ''' Main routine '''
    parser = argparse.ArgumentParser(
        description='Calculate autopilot pass rate and regression rate')
    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='enable debug mode')
    parser.add_argument('logfile', help='autopilot result file in Junit '
                        'format')

    args = parser.parse_args()
    set_logging(args.debug)

    (testcnt, skipcnt, failed) = parselog(args.logfile)
    total = testcnt - skipcnt

    if total <= 0:
        failrate = 1
    else:
        failrate = float(len(failed)) / total

    # Num tests, failed rate, regression rate
    sys.stdout.write("%d\t%d\t%.3f\t%d\n" % (total, len(failed), failrate, 0))
    sys.stdout.flush()


if __name__ == "__main__":
    main()
