#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2014 Canonical
#
# Authors:
#  Didier Roche
#  ≈Åukasz 'sil2100' Zemczak
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import argparse
import glob
import lazr
import logging
import os
import re
import shutil
import subprocess
import sys

from cupstream2distro import branchhandling, launchpadmanager, packagemanager, silomanager, tools
from cupstream2distro.settings import BOT_DEBFULLNAME, PROJECT_CONFIG_SUFFIX, SERIES_VERSION, SILO_EMPTY
from cupstream2distro.tools import clean_source

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Prepare, build and check packages")

    parser.add_argument("--rebuildpackages", nargs='+', default = [], help="Don't rebuild everything and only rescan MPS provided (source packages)")
    parser.add_argument("--watchonly", action='store_true', help="Only watch the current ppa")
    parser.add_argument("--forcerebuild", action='store_true', help="Force rebuilding components associated to a MP even if there is no diff with dest")
    parser.add_argument("--ignorestep", action='store_true', help="Ack a whole rebuild even if one was already requested.")
    parser.add_argument("--ignoremissingtwins", action='store_true', help="(Usually irrelevant) Ignore missing 'twin' packages for the selected list (like those having -gles duplicates).")
    parser.add_argument("--dontreorderprereqs", action='store_true', help="Don't forcefully reorder branches if prerequisites are used.")
    parser.add_argument("--takewholecommitmsg", action='store_true', default=False, help="Use whole commit message when generating changelog, not just the brief part.")
    parser.add_argument('-d', '--debug', action='store_true', default=False, help="Enable debug infos")

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    if args.debug:
        logging.debug("Debug mode enabled")

    silo_config = silomanager.load_config()
    silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILDING, "Preparing packages", ping=False)

    src_ppa = launchpadmanager.get_resource_from_token(silo_config["global"]["ppa"])
    dest = launchpadmanager.get_resource_from_token(silo_config["global"]["dest"])
    series = launchpadmanager.get_resource_from_token(silo_config["global"]["series"])

    if not args.rebuildpackages and not args.watchonly:
        if silomanager.get_config_step(silo_config) != SILO_EMPTY:
            if args.ignorestep:
                logging.warning("You already tried to build everything. But the ignore option is set.")
            else:
                logging.error("You already tried to build everything. You need to either:\n - use the ignore step option (to rebuild all MPs)\n - use the \"only rebuild packages\" option (to rebuild only some components associated to a MP) \n - use the watch only option (to only check ppa status without any rebuild).")
                silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: prevent a whole rebuild as one full build was already successful. Is that on purpose? Please check available options.")
                sys.exit(1)
        # remove everything but the archived .project_ files
        logging.info("Whole rebuild, ensuring that the silo is in a coherent state. Keep the published files")
        for filename in os.listdir("."):
            # don't remove archive file and config file
            if not ".{}_".format(PROJECT_CONFIG_SUFFIX) in filename and not "config" in filename:
                try:
                    shutil.rmtree(filename)
                except OSError:
                    os.remove(filename)

    # reset the status
    if not silomanager.set_config_step(silo_config, SILO_EMPTY):
        logging.error("Couldn't reset the step in the configuration file.")
        silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Build failed: couldn't reset status or parameters for job.")
        sys.exit(1)


    # detect if we have a prepare only source not in configuration
    components_not_in_config = []
    for source in args.rebuildpackages:
        if source not in silo_config["mps"]:
            components_not_in_config.append(source)
    if components_not_in_config:
        message = "One or more components provided in rebuildpackages ({}) are not in the MP silo configuration. Ask for a reconfiguration of the silo with the new MPs to add please.".format(", ".join(components_not_in_config))
        logging.error(message)
        silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: " + message)
        sys.exit(1)

    # cycle through all branches and prepare them
    components_to_prepare = {}
    for source in silo_config["mps"]:
        if (not args.rebuildpackages and not args.watchonly) or source in args.rebuildpackages:
            logging.info("Adding {} MP(s) to prepare".format(source))
            for mp_link in silo_config['mps'][source]:
                components_to_prepare.setdefault(source, []).append(launchpadmanager.get_resource_from_token(mp_link))
            # cleaning (in case of partial rebuild)
            clean_source(source)

    all_sources = components_to_prepare.keys() + silo_config["sources"]
    missing = packagemanager.check_if_packages_require_twin_upload(all_sources)
    if missing:
        message = "Some projects are missing their 'twin package' uploads (e.g. their -gles counter-parts): {}.".format(", ".join(missing))
        if args.ignoremissingtwins:
            logging.warning(message + " But the ignore flag was set.")
        else:
            logging.error(message)
            silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: " + message)
            sys.exit(1)

    # prepare source and dput by one
    src_ppa_name = "{}/{}/{}".format(src_ppa.owner.name, src_ppa.distribution.name, src_ppa.name)
    dest_ppa_name = "{}/{}/{}".format(dest.owner.name, src_ppa.distribution.name, dest.name)

    src_pkgs_to_upload = {}
    for source_package_name in components_to_prepare:
        logging.info("=== Trying to prepare {} ===".format(source_package_name))

        # get dest branch first
        dest_branch = components_to_prepare[source_package_name][0].target_branch.web_link
        logging.info("Branching {} to {}".format(dest_branch, source_package_name))
        branchhandling.get_branch(dest_branch, source_package_name)
        bzr_pending_branch_uri = os.path.abspath(source_package_name)
        os.chdir(bzr_pending_branch_uri)
        dest_tip_bzr_rev = branchhandling.get_tip_bzr_revision()
        packaging_version_in_destbranch = packagemanager.get_packaging_version()

        # first, try looking into the merge list and re-order it if there are any prereqs present
        # if no prereqs are present, the components list stays the same
        if not args.dontreorderprereqs:
            components = tools.reorder_branches_regarding_prereqs(components_to_prepare[source_package_name])
        else:
            components = components_to_prepare[source_package_name]

        # get all branches one after another and merge them in bzr_pending_branch_uri
        for mp in components:
            branch = mp.source_branch.web_link
            logging.info("Trying to merge {} (at rev {}) into {}".format(branch, mp.source_branch.revision_count, mp.target_branch.web_link))

            bugs_fixes = ""
            for bug in mp.getRelatedBugTasks():
                if not bugs_fixes:
                    bugs_fixes = "Fixes: "
                else:
                    bugs_fixes += ", "
                bugs_fixes += bug.self_link.split('/')[-1]

            # use a set to fetch the reviewer list
            approved_by_set = set()
            for review in mp.all_comments:
                if review.vote == "Approve":
                    approved_by_set.add(review.author.display_name)
                elif review.vote == "Disapprove" or review.vote == "Needs Fixing":
                    if review.author.display_name in approved_by_set:
                        approved_by_set.remove(review.author.display_name)

            approved_by = ""
            for reviewer in approved_by_set:
                if not approved_by:
                    approved_by = "\nApproved by: "
                else:
                    approved_by += ", "
                approved_by += reviewer

            commit_message = mp.commit_message
            if commit_message:
                commit_message = "{} {}{}".format(commit_message.encode('utf-8'), bugs_fixes, approved_by.encode('utf-8'))

            # grab committers
            committers = branchhandling.grab_committers_compared_to(bzr_pending_branch_uri, branch)

            try:
                if not branchhandling.merge_branch(bzr_pending_branch_uri, branch, commit_message, authors=committers):
                    logging.error("Conflicts when attempting to merge {} into previous merged + {}. You will need to reconcile manually branches that you provided as a parameter for merging into the destination branch and rerun this job".format(branch, mp.target_branch.web_link))
                    os.chdir('..')
                    silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: Merge conflict.")
                    sys.exit(1)
            # TODO: we should loop to show if there is more issues and then exit
            except branchhandling.NoCommitFoundException as e:
                message = "There is no commit message in {} and we can't get it from debian/changelog. Please check that you set a commit message on all your MPs if you didn't touch debian/changelog.".format(branch)
                logging.error(message)
                silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: " + message)
                sys.exit(1)

        #  Get changelog informations
        logging.info("Get changelog info")
        packaging_version_in_prepared_branch = packagemanager.get_packaging_version()

        # Check version in ppa
        logging.info("Get previous version in silo")
        version_in_ppa = packagemanager.get_current_version_for_series(source_package_name, series.name, src_ppa_name)
        if packagemanager.is_version1_higher_than_version2(version_in_ppa, packaging_version_in_prepared_branch):
            logging.info("A version in the ppa ({}) is higher than the proposed version in bzr ({}) (previous tests/builds failing?). Basing on that one.".format(version_in_ppa, packaging_version_in_destbranch))
            previous_packaging_version = version_in_ppa
        else:
            previous_packaging_version = packaging_version_in_prepared_branch

        # Check version in distro
        logging.info("Get version available in distro")
        distro_version = packagemanager.get_current_version_for_series(source_package_name, series.name, dest=dest.distribution.main_archive)

        # if the target is the distro, we ensure we have all releases in proposed branch
        if launchpadmanager.is_dest_distro_archive(silo_config["global"]["dest"]):
            previous_finaledest_version = distro_version
        # target is a ppa
        else:
            previous_finaledest_version = packagemanager.get_current_version_for_series(source_package_name, series.name, dest=dest)

        # ensure that the previous release (in distro or in dest ppa) ended up in the vcs
        force_rebuild = False
        if args.forcerebuild:
            logging.info("Force rebuild option set. Will update even if destination don't contain latest version requested.")
            force_rebuild = True
        else:
            with open("debian/changelog") as changelog:
                if not packagemanager.is_version_in_changelog(previous_finaledest_version, changelog):
                    message = ("A version ({}) is available at the destination archive for that component but is not in the destination branch which is still at {}. You need to ensure that your version contains the fix in the destination or you can force rebuild to bypass the check.".format(previous_finaledest_version, packaging_version_in_prepared_branch))
                    logging.warning(message)
                    os.chdir('..')
                    silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Can't build: Some projects are missing revisions from distribution.")
                    sys.exit(1)

        if not launchpadmanager.is_dest_distro_archive(silo_config["global"]["dest"]):
            # if the version in the distro is higher than the previous packaging version (either the version in intermediate ppa or packaging bzr version
            # We are going to force releasing, but basing on this version
            if packagemanager.is_version1_higher_than_version2(distro_version, previous_packaging_version):
                logging.info("The version in distro ({}) is higher than what is proposed in the bzr version for that branch ({}). Basing on the distro version.".format(distro_version, previous_packaging_version))
                logging.info("Forcing release mode as the version in distro ({}) is higher than current destination ppa ({})".format(distro_version, previous_packaging_version))
                previous_packaging_version = distro_version
                force_rebuild = True

        # Check if we need to republish
        dest_source_package = None
        logging.info("Check if we need to release a new package")
        os.chdir('..')
        dest_source_package = packagemanager.get_source_package_from_dest(source_package_name, dest, previous_finaledest_version, series.name)
        if dest_source_package:
            dest_source_package = os.path.abspath(dest_source_package)
        os.chdir(bzr_pending_branch_uri)
        # nothing to release
        if not packagemanager.is_new_content_relevant_since_old_published_source(dest_source_package):
            if not force_rebuild:
                logging.info("No new useful revision published compared to dest, no need to upload this component")
                os.chdir('..')
                continue
            logging.info("No new useful revision published but force rebuilding is set")

        if launchpadmanager.is_dest_distro_archive(silo_config["global"]["dest"]):

            # only version if we don't see the flag to not version it.
            if not packagemanager.has_dont_change_version_flag():
                packaging_version = packagemanager.create_new_packaging_version(previous_packaging_version, series_version=SERIES_VERSION[series.name])
            else:
                packaging_version = packagemanager.get_packaging_version()
        else:
            packaging_version = packagemanager.create_new_packaging_version(previous_packaging_version, destppa=dest_ppa_name, series_version=SERIES_VERSION[series.name])

        # Refresh symbol files
        logging.info("Update symbol files version if needed")
        packagemanager.refresh_symbol_files(packaging_version)

        logging.info("Prepare changelog content")
        authors_commits = {}

        try:
            # first try: in case someone release and release a version without merging back (we don't want to duplicate the commits). This is the main case anyway.
            log_content = branchhandling.return_log_diff_from_tag(packaging_version_in_destbranch)
        except:
            try:
                # second hammer: we then recollect from the last version in the destination (some lines can be duplicated)
                log_content = branchhandling.return_log_diff_from_tag(previous_finaledest_version)
            except:
                # last hammer with FIXME: -100 is a hack as we don't have anymore any information on when the last release happen. People are transitionned to a tag system.
                log_content = branchhandling.return_log_diff_since_last_release(branchhandling.return_log_diff("-100"))
        alreadyfixed_bugs = set()
        with open("debian/changelog") as f:
            alreadyfixed_bugs = packagemanager.collect_bugs_in_changelog_until_latest_snapshot(f, source_package_name)
        (authors_commits, bugs_set) = branchhandling.collect_author_commits(log_content, alreadyfixed_bugs, take_whole_commit=args.takewholecommitmsg)
        if force_rebuild:
            authors_commits.setdefault(BOT_DEBFULLNAME, []).append("New rebuild forced")
        packagemanager.update_changelog(packaging_version, series.name, None, authors_commits)
        branchhandling.commit_release(packaging_version)

        logging.info("Sync launchpad with current proposed work")
        launchpadmanager.open_bugs_for_source(bugs_set, source_package_name, series.name, dest.distribution.name)

        logging.info("Build source package")
        packagemanager.build_source_package(series.name, previous_finaledest_version)
        os.chdir('..')
        newdsc_path = "{}_{}.dsc".format(source_package_name, packaging_version.split(':')[-1])

        # second diff step: in case the source package was created from nothing (like a diff between trunk and the source package, but none after newly .dsc created extraction)
        if not force_rebuild and dest_source_package:
            logging.info("Check that the newly created source package has relevant diff")
            if not packagemanager.is_relevant_source_diff_from_previous_dest_version(newdsc_path, dest_source_package):
                message = ("There was a diff between trunk and the source package in ubuntu triggering a source package build. However, after that one was created, we diffed again "
                           "between that source in ubuntu and the newly created source extracted and found nothing relevant. Not upload that one then. Please check that the relevant "
                           "diff in the package creation is justified by diffing manually trunk and the source in ubuntu.")
                logging.warning(message)

        # check the .changes file: that we don't have an empty changelog
        logging.info("Checking finale changelog")
        with open("{}_{}_source.changes".format(source_package_name, packaging_version.split(':')[-1])) as f:
            for line in f:
                if re.match("   \* *$", line):
                    message = ("You generated an emtpy changelog content for {}. This generally means that one or many merge proposals have a change in debian/changelog with no UNRELEASED or no content in the changelog. "
                               "If you modify debian/changelog in your commit, the commit message for the merge proposal isn't used, so you need to put yourself some changelog content into that file. "
                               "Please change those MP and rerun the build job.".format(source_package_name))
                    logging.error(message)
                    silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Build failed: Some packages generate an empty changelog. Check the job for more info.")
                    sys.exit(1)


        # Prepare if a packaging change is part of the diff
        logging.info("Generate a diff if meaningfull packaging changes")
        diff_filepath = tools.get_packaging_diff_filename(source_package_name, packaging_version)
        olddsc_path = None
        if dest_source_package:
            for file in os.listdir(os.path.dirname(dest_source_package)):
                if file.endswith(".dsc"):
                    olddsc_path = os.path.join(os.path.dirname(dest_source_package), file)
        packagemanager.generate_diff_between_dsc(diff_filepath, olddsc_path, newdsc_path)
        # Save infos for uploading later on.
        src_pkgs_to_upload[source_package_name] = (packaging_version, branch, dest_tip_bzr_rev, previous_finaledest_version)


    if "source_archive" in silo_config:
        source_archive = launchpadmanager.get_resource_from_token(silo_config['source_archive'])
        source_series = silo_config['source_series']
        for pkg in silo_config["sources"]:
            current_version = packagemanager.get_current_version_for_series(pkg, source_series, dest=source_archive)

            # prepare new version number
            if source_archive.distribution.name == "ubuntu" and dest.distribution.name == "ubuntu-rtm":
                split_version = current_version.split("-")
                split_version[0] += "~rtm"
                new_version = "-".join(split_version)
            else:
                new_version = current_version

            if packagemanager.is_version_for_series_in_dest(pkg, new_version, series, src_ppa):
                logging.info("Package {} seems to be up-to-date in the silo PPA (version {})".format(pkg, new_version))
                continue

            dest_source_package = packagemanager.get_source_package_from_dest(pkg, source_archive, current_version, source_series)
            if dest_source_package:
                dest_source_package = os.path.abspath(dest_source_package)
            os.chdir(dest_source_package)

            # modify the changelog
            changelog = open("debian/changelog", "r").readlines()
            changelog_split = changelog[0].split(" ")
            changelog_split[1] = "({})".format(new_version)
            changelog_split[2] = "{};".format(series.name)
            changelog[0] = " ".join(changelog_split)
            with open("debian/changelog", "w") as f:
                for line in changelog:
                    f.write(line)

            # rename the tarball, if needed
            if new_version != current_version:
                os.chdir("..")
                for file_name in os.listdir('.'):
                    if pkg in file_name and ".tar." in file_name:
                        orig_tarball = file_name
                new_upstream_version = packagemanager.get_upstream_version(new_version)
                current_upstream_version = packagemanager.get_upstream_version(current_version)
                new_orig_tarball = orig_tarball.replace(current_upstream_version, new_upstream_version)
                os.rename(orig_tarball, new_orig_tarball)

                os.chdir(dest_source_package)

            # build the source package
            logging.info("Preparing source package for the sync of {} version {}".format(pkg, new_version))
            packagemanager.build_source_package(series.name, current_version)

            # Save infos for uploading later on.
            src_pkgs_to_upload[source_package_name] = (new_version, "", -1, "")

            os.chdir("..")



    # do the actual upload to the ppas
    logging.info("Uploading components to the ppa")
    for source_package_name in src_pkgs_to_upload:
        (packaging_version, branch, dest_tip_bzr_rev, previous_finaledest_version) = src_pkgs_to_upload[source_package_name]
        packagemanager.upload_package(source_package_name, packaging_version, src_ppa_name)
        # Save infos for other jobs, in case it's a locally built package
        if branch:
            tools.save_project_config(source_package_name, branch, dest_tip_bzr_rev, previous_finaledest_version, packaging_version)


    # look at the ppa and generate .projects
    logging.info("Looking at the ppa {} ({}) content".format(src_ppa.web_link, series.name))
    # as we recreate all .projects file for those direct uploads, let's clean their metadata
    for source in silo_config["sources"]:
        clean_source(source)
    direct_upload_not_in_list = []
    try:
        for pkg in src_ppa.getPublishedSources(distro_series=series, status="Published"):
            if pkg.source_package_name in silo_config["mps"]:
                continue
            if pkg.source_package_name in silo_config["sources"]:
                dest_current_version = packagemanager.get_current_version_for_series(pkg.source_package_name, series.name, dest=dest)
                # if a direct source pacakge upload was already published, ignore it
                published_sources = tools.get_published_to_distro_projects()
                try:
                    if dest_current_version in published_sources[pkg.source_package_name]:
                        continue
                except KeyError:
                    # scan the unpublished upload                
                    tools.save_project_config(pkg.source_package_name, "", "", dest_current_version, pkg.source_package_version)
                    # download as well the .dsc file for watch-ppa
                    source_dir = packagemanager.get_source_package_from_dest(pkg.source_package_name, src_ppa, pkg.source_package_version, series.name)
                    shutil.copy(glob.glob(os.path.join(os.path.dirname(source_dir), '*.dsc'))[0], os.path.abspath('.'))
            else:
                direct_upload_not_in_list.append(pkg.source_package_name)
    except lazr.restfulclient.errors.BadRequest:
        pass # no package in the ppa yet

    if direct_upload_not_in_list:
        message = "Some packages ({}) that are not in the MP and not in sources list have been detected in the ppa. Please remove them from the ppa or ask for a reconfiguration.".format(", ".join(direct_upload_not_in_list))
        logging.error(message)
        silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Build failed: " + message)
        sys.exit(1)

    # watch ppa
    silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILDING, "Building", ping=False)
    logging.info("Check ppa status in {}".format(src_ppa.web_link))
    dest_archive = launchpadmanager.get_resource_from_token(silo_config["global"]["dest"])
    watch_ppa_exec = os.path.join(os.path.dirname(__file__), "watch-ppa")
    call_params = [watch_ppa_exec, "-s", series.name, "-p", "{}/{}/{}".format(src_ppa.owner.name, dest_archive.distribution.name, src_ppa.name)]
    call_params.extend(["--distribution", dest_archive.distribution.name])
    if not launchpadmanager.is_dest_distro_archive(silo_config["global"]["dest"]):
        call_params.extend(["--destppa", dest_ppa_name])
    if subprocess.call(call_params) != 0:
        silomanager.set_config_status(silo_config, silomanager.SILO_STATE_BUILD_FAILED, "Build failed: Some packages failed to build.")
        sys.exit(1)
