#!/usr/bin/python -u
# -*- coding: utf-8 -*-
# Copyright (C) 2014 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import csv
import logging
import os
import requests
import subprocess
import sys
import tempfile
import re

from cupstream2distro.settings import SPREADSHEET_CSV_URL
from cupstream2distro.tools import parse_and_clean_entry


class COL:
    pass


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(
        description="Prepare or configure a silo from a request id "
                    "using the spreadsheet infos")

    parser.add_argument(
        "--request-id",
        help="Update/Configure this request id")
    parser.add_argument(
        "--reconfigure-for-silo",
        help="Update/Configure this silo name")
    parser.add_argument(
        "--series",
        help="Series used to build the package")
    parser.add_argument(
        "--destppa",
        help="Consider this destppa instead of {series}-proposed")
    parser.add_argument(
        "--reconfiguresilo",
        action='store_true',
        help="Reconfigure an existing silo")
    parser.add_argument(
        "--restricted",
        action='store_true',
        help="Restrict to only add MP for already locked components when "
             "reconfiguring an existing silo")
    parser.add_argument(
        "--ignore-conflicts",
        action='store_true',
        help="Ignore conflicting components in multiple silos. This "
             "should only be used in very rare and identified case. "
             "Both silos owners need to be aware about it as the second one "
             "will have to rebuild and retest.")
    parser.add_argument(
        "--use-preprod-silo",
        action='store_true',
        help="Assign a silo with preproduction CI Train code")
    parser.add_argument(
        '-d',
        '--debug',
        action='store_true',
        default=False,
        help="Enable debug infos")

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    if args.debug:
        logging.debug("Debug mode enabled")

    if args.reconfigure_for_silo:
        logging.info("Reconfiguration of silo requested for {}".format(
            args.reconfigure_for_silo))
    else:
        if not args.request_id:
            logging.error("Request id is mandatory")
            sys.exit(1)

    logging.info(
        "Getting data from the spreadsheet for request "
        "{}".format(args.request_id))

    # proceed and download the csv version of the spreadsheet (only way to get
    # data anonymously)
    response = requests.get(SPREADSHEET_CSV_URL)
    if response.status_code != 200:
        logging.error(
            "Couldn't fetch {} and so, couldn't proceed your question. Can "
            "be due to an temporary network hiccup, please retry "
            "later.".format(SPREADSHEET_CSV_URL))
        sys.exit(1)

    # store the answer in a temp file
    (fd, filename) = tempfile.mkstemp()
    with open(filename, 'w') as f:
        f.write(response.content.encode('utf8'))

    request_found = False
    # use to ensure the unicity of silo name (shouldn't happen apart from a bad
    # sync on the spreadsheet)
    unique_silo_name = True
    with open(filename, 'rb') as f:
        content = csv.reader(f)

        # First two rows are misc header data that don't conform to the columns
        content.next() and content.next()

        # Map column header names to column numbers
        for i, heading in enumerate(content.next()):
            setattr(COL, re.split('\W', heading.lower())[0], i)

        # Now iterate over the remaining rows, which are just the actual data
        for row in content:
            if args.reconfigure_for_silo:
                if row[COL.assigned] == args.reconfigure_for_silo:
                    # second matching
                    if request_found:
                        logging.error(
                            "{} is available more than once in the "
                            "spreadsheet. Please request to fix some wrong "
                            "metadata due to a bad automated sync.".format(
                                args.reconfigure_for_silo))
                        unique_silo_name = False
                    args.request_id = row[COL.request]
                    raw_mps = row[COL.merge]
                    raw_sources = row[COL.additional]
                    raw_landers = row[COL.lander]
                    distribution = row[COL.target]
                    request_found = True
            else:
                if row[COL.request] == args.request_id:
                    raw_mps = row[COL.merge]
                    raw_sources = row[COL.additional]
                    raw_landers = row[COL.lander]
                    distribution = row[COL.target]
                    request_found = True
                    break
    os.remove(filename)

    if not unique_silo_name:
        sys.exit(1)

    # ensure we found anything
    if not request_found:
        logging.error(
            "We couldn't find any request in the spreadsheet matching your "
            "demand. Ensure with the landing team there is a matching "
            "request in.")
        sys.exit(1)

    mps = parse_and_clean_entry(raw_mps)
    sources = parse_and_clean_entry(raw_sources, comma_as_sep=False)
    landers = parse_and_clean_entry(raw_landers, slash_as_sep=True)

    prepare_silo_cmd = os.path.join(
        os.path.abspath(os.path.dirname(__file__)),
        'prepare-silo')

    cmd = [prepare_silo_cmd, '--request-id', args.request_id]
    series = ''
    if mps:
        cmd.append('--mps')
        cmd.extend(mps)
    if sources:
        if sources[0].startswith("sync:"):
            # in case we have a sync request, remove it from the sources list
            # and mark the silo properly
            sync = sources[0][5:]
            cmd.extend(['--sync-request', sync])
            sources = sources[1:]
        cmd.append('--sources')
        cmd.extend(sources)
    if landers:
        cmd.append('--landers')
        cmd.extend(landers)
    if distribution:
        split = distribution.split('/')
        cmd.extend(['--distribution', split[0]])
        if len(split) > 1:
            series = split[1]

    # add command options
    if args.series:
        series = args.series
    if series:
        cmd.extend(['--series', series])

    if args.destppa:
        cmd.extend(['--destppa', args.destppa])
    if args.reconfiguresilo:
        cmd.append('--reconfiguresilo')
    if args.restricted:
        cmd.append('--restricted')
    if args.ignore_conflicts:
        cmd.append('--ignore-conflicts')
    if args.use_preprod_silo:
        cmd.append('--use-preprod-silo')
    if args.debug:
        cmd.append('--debug')

    logging.info("Executing request")
    return_code = subprocess.call(cmd)
    if return_code != 0:
        logging.error("Couldn't assign or reconfigure silo")
        sys.exit(return_code)
