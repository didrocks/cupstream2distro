#!/usr/bin/python -u
# -*- coding: utf-8 -*-
# Copyright (C) 2014 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import lazr
import logging
import os
import sys

from cupstream2distro import branchhandling, launchpadmanager, packageinppamanager, silomanager
from cupstream2distro.settings import SILO_BUILDPPA_SCHEME, SILOS_DIR, SILO_NAME_LIST, SILO_EMPTY
from cupstream2distro.tools import clean_source
from cupstream2distro.utils import ignored


def check_not_adding_new_components(project_name, allowed_components_from_previous_config, config, silo_path):
    """Check that a self reconfigure doesn't add new components"""

    if project_name not in allowed_components_from_previous_config:
        message = "{} was not in the initial list of components for that silo. You can't reconfigure the silo yourself. Please ask the landing team to reconfigure it for you.".format(project_name)
        logging.error(message)
        silomanager.set_config_step(config, -1, uri=silo_path)
        silomanager.set_config_status(config, silomanager.SILO_STATE_RECONFIGURE_FAILED, "Reconfigure failed: " + message, uri=silo_path)
        sys.exit(1)


if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(description="Prepare and assign a free silo from a ppa",
                                     epilog="You need to either pass an mps or sources")

    parser.add_argument("--request-id", help="Update/Configure this request id")

    parser.add_argument("--distribution", default="ubuntu", help="Which distribution to target (default: ubuntu)")
    parser.add_argument("--series", help="Series used to build the package")
    parser.add_argument("--destppa", help="Consider this destppa instead of {series}-proposed")
    parser.add_argument("--mps", nargs='*', default = [], help="Merge proposal urls")
    parser.add_argument("--sources", nargs='*', default = [], help="Add sources packages that will be uploaded later manually to the ppa")
    parser.add_argument("--landers", nargs='*', default = [], help="Landers who are owners of that request")
    parser.add_argument("--reconfiguresilo", action='store_true', help="Reconfigure an existing silo")
    parser.add_argument("--restricted", action='store_true', help="Restrict to only add MP for already locked components when reconfiguring an existing silo")
    parser.add_argument("--ignore-conflicts", action='store_true', help="Ignore conflicting components in multiple silos. This should only be used in very rare and identified case. Both silos owners need to be aware about it as the second one will have to rebuild and retest.")
    parser.add_argument("--use-preprod-silo", action='store_true', help="Assign a silo with preproduction CI Train code")
    parser.add_argument('-d', '--debug', action='store_true', default=False, help="Enable debug infos")


    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    if args.debug:
        logging.debug("Debug mode enabled")

    if not args.request_id:
        logging.error("Request id is mandatory")
        sys.exit(1)
    if not args.mps and not args.sources:
        logging.error("You need at least specify a MP or a source")
        sys.exit(1)
    if args.restricted and not args.reconfiguresilo:
        logging.error("Restricted mode should only be used to reconfigure a silo")
        sys.exit(1)

    project_urls = args.mps[:]
    project_urls.extend(args.sources)

    # make sure the distribution parameter is one of the two supported right now
    if args.distribution not in [ 'ubuntu', 'ubuntu-rtm' ]:
        logging.error("Distribution {} is currently not supported in the CI Train. Not assigning".format(args.distribution))
        sys.exit(1)

    # create all silo names
    with ignored(OSError):
        os.mkdir(SILOS_DIR)
    for silo_name in SILO_NAME_LIST[args.distribution]:
        with ignored(OSError):
            os.mkdir(os.path.join(SILOS_DIR, silo_name))

    # first, check that a silo is available
    dest = None
    series = None

    request_id = args.request_id
    existing_config = silomanager.find_silo_config_for_request_id(request_id, SILOS_DIR)

    # check provided input matches
    if not args.reconfiguresilo and existing_config:
        logging.error("You didn't ask to reconfigure a silo, but we found it assigned to {}. Please ensure to check the missing option if this is really what you want to do.".format(existing_config['siloname']))
        sys.exit(1)
    if args.reconfiguresilo and not existing_config:
        logging.error("You asked to reconfigure request id {}. But we couldn't find it in any existing silo for it. Are you sure you don't want rather to assign a new silo with it?".format(request_id))
        sys.exit(1)

    if args.reconfiguresilo and existing_config:
        silo_name = existing_config['siloname']
        logging.info("Reconfiguring {} as an existing silo for request {}".format(silo_name, request_id))
        # set the same destination, series
        dest = launchpadmanager.get_resource_from_token(existing_config["global"]["dest"])
        series = launchpadmanager.get_resource_from_token(existing_config["global"]["series"])
        # ensure that the series matches the old series field or yell
        if args.series and series.name != args.series:
            logging.error("You provided a series in the reconfigure {} which is different from the original series that request was for {}. To ensure this is what's wanted, it's preferable to free this silo and request a new one for the new series.".format(args.series, series))
            sys.exit(1)
        allowed_components_from_previous_config = existing_config['mps'].keys() + existing_config['sources']
        logging.debug("Components in previous configure: " + ", ".join(allowed_components_from_previous_config))
    else:
        logging.info("Checking that a silo is available")
        silo_name = silomanager.return_first_available_silo(SILOS_DIR, preprod=args.use_preprod_silo, distribution=args.distribution)
        if not silo_name:
            logging.error("No silo is available")
            sys.exit(1)

    # silo attribution (made automatically or explicitely)
    if not series:
        if not args.series:
            logging.error("You need to provide a series to attribute a new silo")
            sys.exit(1)
        series = launchpadmanager.get_series(args.series, args.distribution)
        if args.destppa:
            dest = launchpadmanager.get_ppa(args.destppa)
        else:
            dest = launchpadmanager.get_distribution_archive(args.distribution)

    logging.info("Configuring for {} ({}) in {}".format(", ".join(project_urls), series.name, dest.name))
    config = {"requestid": request_id,
              "global": { "dest": dest.self_link,
                          "series": series.self_link,
                          "step": "",
                          "status": "" },
              "landers": args.landers,
              "siloname": silo_name,
              "sources": [],
              "mps": {}
    }
    silo_path = os.path.join(SILOS_DIR, silo_name)
    logging.info("Silo path: {}, silo name: {}".format(silo_path, silo_name))

    if args.sources:
        logging.info("Additional packages will be directly uploaded to the ppa: {}".format(", ".join(args.sources)))
        config["sources"] = args.sources

    one_project_already_in_use = False
    # grab the project name of all MP
    for mp_url in args.mps:
        mp = launchpadmanager.get_resource_from_url(mp_url)
        try:
            source_package_name = branchhandling.get_source_package_name_from_branch(mp.target_branch.web_link)
        except AttributeError:
            logging.error("{} doesn't seem to be a valid merge proposal url".format(mp_url))
            sys.exit(1)
        project_name = mp.target_branch.project.name

        # ensure a self reconfiguring doesn't add new projects
        if args.reconfiguresilo and args.restricted:
            check_not_adding_new_components(source_package_name, allowed_components_from_previous_config, existing_config, silo_path)

        if (source_package_name != project_name):
            message = "Project name ({}) doesn't align with the source package name ({})".format(project_name, source_package_name)
            logging.warning(message)

        config["mps"].setdefault(source_package_name, []).append(mp.self_link)

        # check that any of those components are part of any current transaction
        if not silomanager.is_project_not_in_any_configs(mp.target_branch.project.name, series, dest, SILOS_DIR, silo_name, dont_error_but_warn=args.ignore_conflicts):
            one_project_already_in_use = True

    # check that additional sources are not as well already in use
    for source in config["sources"]:

        # ensure a self reconfiguring doesn't add new projects
        if args.reconfiguresilo and args.restricted:
            check_not_adding_new_components(source, allowed_components_from_previous_config, existing_config, silo_path)

        if not silomanager.is_project_not_in_any_configs(source, series, dest, SILOS_DIR, silo_name, dont_error_but_warn=args.ignore_conflicts):
            one_project_already_in_use = True

    if one_project_already_in_use:
        message = "One or more projects are already in use for the same destination and series in another silo (see above)."
        if args.ignore_conflicts:
            logging.warning(message + " However, the ignore flag was set. Please inform both silos owners directly.")
        else:
            logging.error(message)
            sys.exit(1)

    # check that all MPs for a source are targetting the same branch
    logging.info("Checking that all target branch for the same source in mps are targetting the same branches")
    all_same_dest = True
    for source in config["mps"]:
        first_mp = None
        for mp_link in config['mps'][source]:
            mp = launchpadmanager.get_resource_from_token(mp_link)
            if not first_mp:
                first_mp = mp
            else:
                current_branch_link = mp.target_branch.web_link
                if current_branch_link != first_mp.target_branch.web_link:
                    logging.error("{} is targetting {} while {} is targetting {}".format(mp.web_link, current_branch_link, first_mp.web_link, first_mp.target_branch.web_link))
                    all_same_dest = False

    if not all_same_dest:
        logging.error("Not all MP targetting the same source package are targetting the same branch. Please recheck your configuration.")
        sys.exit(1)

    ppa_uri = SILO_BUILDPPA_SCHEME.format(args.distribution, silo_name.split('/')[-1]) # make sure the silo name does not include the distro prefix
    try:
        ppa = launchpadmanager.get_ppa(ppa_uri)
    except lazr.restfulclient.errors.NotFound:
        logging.error("PPA {} not found".format(ppa_uri))
        sys.exit(1)
    config["global"]["ppa"] = ppa.self_link
    if not silomanager.save_config(config, silo_path):
        sys.exit(1)
    logging.info("Assigning \"{}\" as silo. Build PPA is available at {}".format(silo_name, ppa.web_link))

    # if reconfigure, ensure we remove all projects file and packages from the ppa that are not to take into account anymore
    if args.reconfiguresilo:
        os.chdir(silo_path)
        logging.info("Check and clean all removed sources")
        all_silo_projects = silomanager.get_all_projects(config)
        logging.debug("all silo projects {}".format(all_silo_projects))
        # remove all files related to sources that are not in the configuration anymore as well as all additional uploads in the ppa
        projects_list_to_eventually_clean = set()

        # first source: ppa
        for (source, version, rev, branch) in packageinppamanager.get_all_packages_uploaded():
            logging.debug("Detected in the ppa: {}".format(source))
            projects_list_to_eventually_clean.add(source)
        # second source: package that were in the previous config
        for source in allowed_components_from_previous_config:
            logging.debug("From previous config: {}".format(source))
            projects_list_to_eventually_clean.add(source)
        for source in projects_list_to_eventually_clean:
            if source not in all_silo_projects:
                logging.info("Removing {} from ppa and configuration".format(source))
                clean_source(source)
                for pkg in ppa.getPublishedSources(exact_match=True, distro_series=series, source_name=source):
                    pkg.requestDeletion()
        # NOTE: we don't wait for the removal to be published. Shouldn't be an issue

    silomanager.set_config_step(config, SILO_EMPTY, uri=silo_path)
    silomanager.set_config_status(config, silomanager.SILO_STATE_NONE, "Silo ready to build packages", uri=silo_path, add_url=False)
