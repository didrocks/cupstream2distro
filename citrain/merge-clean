#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2014 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import argparse
import logging
import os
import re
import shutil
import sys
import time
import urllib2
import ConfigParser

from cupstream2distro import branchhandling, launchpadmanager, packageinppamanager, packagemanager, silomanager
from cupstream2distro.settings import SILO_PUBLISHED, SILO_DONE, SILO_PACKAGING_MERGE_COMMIT_MESSAGE, BRANCH_URL, PROJECT_CONFIG_SUFFIX, TIME_BETWEEN_PPA_CHECKS, SILOS_DIR
from cupstream2distro.utils import ignored


def check_packages_and_versions(silo_config, packages_in_dest, ignoremissingprojects, ignorepackagesnotindest):
    '''check packages and versions'''

    all_silo_projects = silomanager.get_all_projects(silo_config)

    # check that all package sources were in the silo configuration
    logging.info("Check that all package sources were in the silo configuration")
    for source in packages_in_dest:
        try:
            all_silo_projects.remove(source)
        except ValueError:
            logging.error("{} wasn't in the initiale configuration. You have messed with the file system directly.\nUnknown state. Please resolve the silo manually and then free it.")
            sys.exit(1)

    if all_silo_projects:
        message = "Some projects ({}) that were in the silo configuration list were not built and published. ".format(", ".join(all_silo_projects))
        if ignoremissingprojects:
            logging.info(message + "The ignore missing projects flag was set. We won't merged the associated MPs of those.")
            # remove them as we are not going to merge their content.
            for remaining_project in all_silo_projects:
                with ignored(KeyError):
                    silo_config["mps"].pop(remaining_project)
                with ignored(ValueError):
                    silo_config["sources"].remove(remaining_project)
        else:
            logging.error(message + "Prepare either prepare the latest missing projects or use the ignore missing projects flag which will release the lock on them.")
            sys.exit(1)

    logging.info("Check that all package sources are published in destination")
    one_package_not_in_dest = False
    dest = launchpadmanager.get_resource_from_token(silo_config['global']['dest'])
    series = launchpadmanager.get_resource_from_token(silo_config['global']['series'])
    for source in packages_in_dest:
        if not packagemanager.is_version_for_series_in_dest(source, packages_in_dest[source], series, dest):
            logging.warning("{} ({}) is not published yet in {}.".format(source, packages_in_dest[source], dest.name))
            one_package_not_in_dest = True
    if one_package_not_in_dest:
        if ignorepackagesnotindest:
            logging.info("The ignore flag is set.")
        else:
            logging.error("One package at least is not available at the destination. See above. You can use the ignore package not in dest flag. The eventual merge will still be proceeded.")
            sys.exit(1)

def merge_and_reconciliate(silo_config, packages_in_dest):
    """Merge and eventually reconcialite all branches"""
    logging.info("Check the revision from all merged branch in trunk didn't change. If changed, try to reconciliate them back.")
    reconciliate_all_branches = True
    base_path = os.path.abspath('.')
    dest_base_uri = os.path.join(base_path, "dest_branches")
    with ignored(OSError):
        shutil.rmtree(dest_base_uri)
    os.mkdir(dest_base_uri)


    for source in silo_config["mps"]:
        source_branch_uri = os.path.join(base_path, "dest_branches")
        target_branch = launchpadmanager.get_resource_from_token(silo_config['mps'][source][0].target_branch)

        version = packages_in_dest[source]
        config = ConfigParser.RawConfigParser()
        config.read("{}.{}_{}".format(source, PROJECT_CONFIG_SUFFIX, version))
        stored_tip_rev = config.get('Branch', 'rev')
        tip_rev = str(target_branch.revision_count)

        # prepare and remerge
        if tip_rev != stored_tip_rev:
            logging.info("New revision ({}) in {} when prepared is based on {}. Trying to merge it for you.".format(tip_rev, source, stored_tip_rev))
            if not branchhandling.merge_branch(dest_branch_uri, target_branch.web_link, "Resync trunk"):
                 branchhandling.push_to_branch(dest_branch_uri, os.path.join(dest_base_uri, source))
                ### repull in trunk
                logging.error("We can't reconciliate your proposed branch with the new commits in target (merge conflicts).")
                reconciliate_all_branches = False
    if not reconciliate_all_branches:
        logging.error("Some branches couldn't be reconciliated with the changes happening meaning in destination branch. Please revert your changes in trunk and relaunch this job.")
        sys.exit(1)

    logging.info("Pushing the branches to the parent ones")
    push_all_branches = True
    for source in silo_config["mps"]:
        branch_uri = os.path.join(base_path, source)
        target_branch_link = launchpadmanager.get_resource_from_token(silo_config['mps'][source][0]).target_branch.web_link
        logging.info("Trying to push to {}".format(target_branch_link))
        if not branchhandling.push_to_branch(branch_uri, target_branch_link):
            url = BRANCH_URL.format(source, "recup")
            logging.error("Can't push this branch to {}, pushing temporarly to {}.".format(target_branch_link, url))
            branchhandling.push_to_branch(branch_uri, url, overwrite=True)
            push_all_branches = False
    if not push_all_branches:
        logging.error("Some branches couldn't be pushed to the destination. Please pull them from the url link above and relaunch this job with only free slot flag.")
        sys.exit(1)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Merge all branches to merge, clean the ppa and free the silo slot")

    parser.add_argument("--onlyfreesilo", action='store_true', help="Only free the ppa and don't merge/check anything.")
    parser.add_argument("--ignoremissingprojects", action='store_true', help="Ignore if some projects that are going to be merged back were not published. No merge will then be processed for those.")
    parser.add_argument("--ignorepackagesnotindest", action='store_true', help="Ignore if some packages are not published in the destination.")
    parser.add_argument("--ignorestep", action='store_true', help="Ignore if previous step didn't successfully end.")
    parser.add_argument('-d', '--debug', action='store_true', default=False, help="Enable debug infos")

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    if args.debug:
        logging.debug("Debug mode enabled")


    silo_config = silomanager.load_config()

    if not args.onlyfreesilo:
        if silomanager.get_config_step(silo_config) != SILO_PUBLISHED:
            if args.ignorestep:
                logging.info("Last step didn't finish successfully, but the ignore flag is set.")
            else:
                logging.error("Last step didn't finish successfully. You need to either ignore that the previous step didn't finished successfully or ensuring that prepare, build and checked passed.")
                sys.exit(1)
            # reset it
            if not silomanager.set_config_step(silo_config, SILO_PUBLISHED):
                logging.error("Couldn't reset the step in the configuration file.")
                sys.exit(1)

        # get latest uploaded version for all packages
        logging.info("Getting all sources that were uploaded with their latest version")
        packages_in_dest = {}
        for (source, version) in packageinppamanager.get_packages_and_versions_uploaded():
            previous_scanned_uploaded_version = packages_in_dest.get(source, "0")
            if packagemanager.is_version1_higher_than_version2(version, previous_scanned_uploaded_version):
                packages_in_dest[source] = version

        check_packages_and_versions(silo_config, packages_in_dest, args.ignoremissingprojects, args.ignorepackagesnotindest)
        merge_and_reconciliate(silo_config, packages_in_dest)


    else:
        logging.info("Only free silo, ignoring all checks and merging branches")


    # set the silo as done
    silomanager.set_config_step(silo_config, SILO_DONE)

    ppa = launchpadmanager.get_resource_from_token(silo_config["global"]["ppa"])
    series = launchpadmanager.get_resource_from_token(silo_config["global"]["series"])
    ppa_base_path = "http://ppa.launchpad.net/{}/{}/ubuntu/dists/{}/main/".format(ppa.owner.name, ppa.name, series.name)
    logging.info("Clean now the source ppa {} in {}".format(ppa.web_link, series.name))

    for pkg in ppa.getPublishedSources(distro_series=series):
        if pkg.status != "Deleted":
            logging.info("Requesting deletion for {}".format(pkg.source_package_name))
            pkg.requestDeletion()

    # Source publication is lying, checking directly the repository
    content = urllib2.urlopen(ppa_base_path).read().decode('utf-8')
    binary_pattern = re.compile('href="(binary-.*)/">')
    url_lists = ["{}{}/Packages".format(ppa_base_path, url) for url in binary_pattern.findall(content)]
    url_lists.append("{}source/Sources".format(ppa_base_path))
    remaining_packages = True
    while(remaining_packages):
        time.sleep(TIME_BETWEEN_PPA_CHECKS)
        logging.info("Checking if ppa is empty.")
        remaining_packages = False

        for url in url_lists:
            if len(urllib2.urlopen(url).read().decode('utf-8')) != 0:
                logging.info("{} still have some packages published".format(url))
                remaining_packages = True

    # Finally, archive the current directory
    current_dir = os.path.abspath(".")
    silo_name = current_dir.split(os.path.sep)[-1]
    silo_back_dir = "{}.previous".format(SILOS_DIR)
    with ignored(OSError):
        os.mkdir(silo_back_dir)
    dest = os.path.join(silo_back_dir, silo_name)
    logging.info("Backing up the silo directory to {}".format(dest))
    with ignored(OSError):
        shutil.rmtree(dest)
    shutil.move(current_dir, dest)
    os.mkdir(current_dir)
    