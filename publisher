#!/usr/bin/python
# -*- coding: UTF8 -*-
# Copyright (C) 2012 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import os
import sys

from cupstream2distro import launchpadmanager, packageinppamanager
from cupstream2distro.branchhandling import get_packaging_diff_filename, propose_branch_for_merging
from cupstream2distro.tools import generate_xml_artefacts
from cupstream2distro.settings import PUBLISHER_PACKAGING_CHANGE_FILENAME, PACKAGE_LIST_RSYNC_FILENAME_FORMAT


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Watch for published package in a ppa. Create a xml artefact if manual copy is needed.",
                                     epilog="serie, ppa and JOB_NAME options can be set by the corresponding long option name env variables as well")

    parser.add_argument("-f", "--force", action='store_true', help="Publish even if there are packaging change. Only done after manual reviews of the diff.")
    parser.add_argument("-s", "--serie", help="Serie used to build the package")
    parser.add_argument("-p", "--ppa", help="PPA to publish this package to (for instance: 'ubuntu-unity/daily-build')")
    parser.add_argument("-d", "--destppa", help="Consider this destppa instead of {serie}-proposed")
    parser.add_argument("-j", "--JOB_NAME", help="Set this JOB_NAME for generating an unique id for the file to rsync")

    args = parser.parse_args()

    serie = args.serie
    ppa = args.ppa
    jobname = args.JOB_NAME
    if not serie:
        serie = os.getenv("serie")
    if not ppa:
        ppa = os.getenv("ppa")
    if not jobname:
        jobname = os.getenv("JOB_NAME")

    if not ppa or not serie:
        print("ppa and serie parameters are mandatory.")
        sys.exit(1)

    # getting the archives and series objects
    if args.destppa:
        dest_archive = launchpadmanager.get_ppa(args.destppa)
        dest_pocket = 'Release'
    else:
        dest_archive = launchpadmanager.get_ubuntu_archive()
        dest_pocket = 'Proposed'
        if not jobname:
            print("JOB_NAME is mandatory if you want to release to the main ubuntu archive")
            sys.exit(1)
    src_ppa = launchpadmanager.get_ppa(ppa)
    src_pocket = 'Release'

    print("Copying from {src_archive} ({src_pocket}) to {dest_archive} ({dest_pocket}) for {serie} serie".format(
          src_archive=src_ppa, src_pocket=src_pocket, dest_archive=dest_archive, dest_pocket=dest_pocket,
          serie=serie))
    projects_with_packaging_changes = []
    for (source, version) in packageinppamanager.get_all_packages_uploaded():
        if os.path.exists(get_packaging_diff_filename(source, version)):
            print ("WARNING: Packaging change for {} ({}).".format(source, version))
            projects_with_packaging_changes.append(source)

    if projects_with_packaging_changes and not args.force:
        print("Don't upload the stack automatically.")
        generate_xml_artefacts("PackagingChange", "Packaging changes in {}".format(", ".join(projects_with_packaging_changes)), PUBLISHER_PACKAGING_CHANGE_FILENAME)
    else:
        package_to_copy = []
        for (source, version) in packageinppamanager.get_all_packages_uploaded():
            print ("Copying {} ({})".format(source, version))
            ###propose_branch_for_merging(source, version)
            if args.destppa:  # direct upload
                dest_archive.copyPackage(from_archive=src_ppa, from_pocket=src_pocket, from_series=serie,
                                         include_binaries=True, to_pocket=dest_pocket, to_series=serie,
                                         source_name=source, version=version)
            else:  # generate a file that will be rsynced from another place
                package_to_copy.append("{}\t{}\t{}\t{}\t{}\t{}\t{}".format(ppa, src_pocket, serie, dest_pocket, serie, source, version))
        if package_to_copy:
            print("writing {} for being able to rsync from main machine".format(PACKAGE_LIST_RSYNC_FILENAME_FORMAT.format(jobname)))
            with open(PACKAGE_LIST_RSYNC_FILENAME_FORMAT.format(jobname), 'w') as f:
                f.write("\n".join(package_to_copy))
