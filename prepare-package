#!/usr/bin/python
# -*- coding: UTF8 -*-
# Copyright (C) 2012 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import logging
import os
import sys

from cupstream2distro import branchhandling, packagemanager, launchpadmanager
from cupstream2distro.tools import generate_xml_artefacts, save_project_config
from cupstream2distro.settings import PREPARE_ARTEFACTS_FILENAME_FORMAT


if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

    parser = argparse.ArgumentParser(description="Prepare package for a specific component to push to a ppa",
                                     epilog="All options can be set by the corresponding long option name env variables as well")

    parser.add_argument("-n", "--sourcename", help="Source package name")
    parser.add_argument("-b", "--branch", help="Branch to use as the upstream source")
    parser.add_argument("-s", "--series", help="Serie used to build the package")
    parser.add_argument("-p", "--ppa", help="PPA to publish this package to (for instance: 'ubuntu-unity/daily-build')")
    parser.add_argument("-d", "--destppa", help="Consider this destppa instead of only the distro for finale destination", default='')
    args = parser.parse_args()

    source_package_name = args.sourcename
    branch = args.branch
    series = args.series
    ppa = args.ppa
    if not source_package_name:
        source_package_name = os.getenv("sourcename")
    if not branch:
        branch = os.getenv("branch")
    if not series:
        series = os.getenv("series")
    if not ppa:
        ppa = os.getenv("ppa")
    instance_info = "for source: {}, branch: {}, series: {}".format(source_package_name, branch, series)

    if not source_package_name or not branch or not series or not ppa:
        logging.error("Missing compulsory environment variables (sourcename, branch, series, ppa) {}".format(instance_info))
        sys.exit(1)

    # Grab project branch
    logging.info("Branching {} to {}".format(branch, source_package_name))
    branchhandling.get_branch(branch, source_package_name)
    os.chdir(source_package_name)

    # Get changelog informations
    logging.info("Get changelog info")
    with open("debian/changelog") as changelog:
        last_upstream_rev = packagemanager.get_latest_upstream_bzr_rev(changelog)
    packaging_version_in_bzr = packagemanager.get_packaging_version()

    if (source_package_name != packagemanager.get_packaging_sourcename()):
        logging.error("Projectbranch doesn't specify the same source name than the packaging itself {}".format(instance_info))
        sys.exit(1)

    # Check version in ppa
    logging.info("Get previous version in ppa")
    version_in_ppa = packagemanager.get_current_version_for_series(source_package_name, series, ppa)
    if packagemanager.is_version1_higher_than_version2(version_in_ppa, packaging_version_in_bzr):
        logging.info("A version in the ppa ({}) is higher than the proposed version in bzr ({}) (previous tests/builds failing?). Basing on that one.".format(version_in_ppa, packaging_version_in_bzr))
        previous_packaging_version = version_in_ppa
    else:
        previous_packaging_version = packaging_version_in_bzr

    # Check version in distro
    logging.info("Get version available in distro")
    distro_version = packagemanager.get_current_version_for_series(source_package_name, series)
    artefacts_file = os.path.abspath(os.path.join('..', PREPARE_ARTEFACTS_FILENAME_FORMAT.format(source_package_name)))

    # if the target is the distro, we ensure we have all releases in trunk
    if not args.destppa:
        dest_archive = launchpadmanager.get_ubuntu_archive()
        previous_finaledest_version = distro_version
    # target is a ppa
    else:
        dest_archive = launchpadmanager.get_ppa(args.destppa)
        previous_finaledest_version = packagemanager.get_current_version_for_series(source_package_name, series, args.destppa)

    # ensure that the previous release (in distro or in dest ppa) ended up in the vcs
    with open("debian/changelog") as changelog:
        if not packagemanager.is_version_in_changelog(previous_finaledest_version, changelog):
            message = ("A version ({}) is available at the destination for that component but is not in trunk which is still at {}. "
                       "Ignoring that component {}.".format(previous_finaledest_version, packaging_version_in_bzr, instance_info))
            logging.info(message)
            generate_xml_artefacts("Prepare",  [message], artefacts_file)
            sys.exit(0)

    force_release = False
    if args.destppa:
        # if the version in the distro is higher than the previous packaging version (either the version in intermediate ppa or packaging bzr version
        # We are going to force releasing, but basing on this version
        if packagemanager.is_version1_higher_than_version2(distro_version, previous_packaging_version):
            logging.info("The version in distro ({}) is higher than what is proposed in the bzr version for that branch ({}). Basing on the distro version.".format(distro_version, previous_packaging_version))
            logging.info("Forcing release mode as the version in distro ({}) is higher than current destination ppa ({})".format(distro_version, previous_packaging_version))
            previous_packaging_version = distro_version
            force_release = True

    # Check if we need to republish
    tip_bzr_rev = branchhandling.get_tip_bzr_revision()
    if not force_release:
        logging.info("Check if we need to release a new package")
        os.chdir('..')
        dest_source_package = packagemanager.get_source_package_from_dest(source_package_name, dest_archive, previous_finaledest_version, series)
        # TODO: all paths, on all projects, should have the stack dir as root, and only chdir in the script, not the functions.
        if dest_source_package:
            dest_source_package = os.path.abspath(dest_source_package)
        os.chdir(source_package_name)
        if not packagemanager.is_new_content_relevant_since_old_published_source(source_package_name, dest_source_package):
            logging.info("No new useful revision published since last daily push, no need to upload this component")
            generate_xml_artefacts("Prepare",  [], artefacts_file)
            sys.exit(0)

    packaging_version = packagemanager.create_new_packaging_version(previous_packaging_version, destppa=args.destppa)

    # Refresh symbol files
    logging.info("Update symbol files version if needed")
    packagemanager.refresh_symbol_files(packaging_version)

    # Prepare changelog
    logging.info("Prepare changelog content")
    authors_bugs_with_title = {}
    # for a feature branch, we don't care about the fixed bugs
    if not args.destppa:
        authors_bugs = branchhandling.collect_author_bugs(last_upstream_rev + 1, source_package_name)
        authors_bugs_with_title = launchpadmanager.get_bugs_titles(authors_bugs)
    packagemanager.update_changelog(packaging_version, series, tip_bzr_rev, authors_bugs_with_title)

    # Prepare if a packaging change is part of the diff
    logging.info("Generate a diff if meaningfull packaging changes")
    # FIXME: same issue with commit not being in feature branch
    if not args.destppa:
        branchhandling.generate_diff_in_branch(last_upstream_rev, source_package_name, packaging_version)

    # opens bugs if we are going to release
    if not args.destppa:
        logging.info("Sync launchpad with current proposed work")
        branchhandling.commit_release(packaging_version, tip_bzr_rev)
        bugs_set = set()
        for author in authors_bugs:
            bugs_set = bugs_set.union(authors_bugs[author])
        launchpadmanager.open_bugs_for_source(bugs_set, source_package_name, series)

    logging.info("Build source package and upload to the ppa")
    packagemanager.build_source_package(series, previous_finaledest_version)
    os.chdir('..')
    packagemanager.upload_package(source_package_name, packaging_version, ppa)

    # Save infos for other jobs
    save_project_config(source_package_name, branch, previous_finaledest_version, packaging_version)

    # generate artefacts
    os.chdir(source_package_name)
    generate_xml_artefacts("Prepare",  [], artefacts_file)

# TODO: clean the ppa (remove all old unpublished packages)
