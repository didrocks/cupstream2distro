#!/usr/bin/python
# -*- coding: UTF8 -*-
# Copyright (C) 2012 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import os
import sys

from cupstream2distro import branchhandling, packagemanager, launchpadmanager
from cupstream2distro.tools import generate_xml_artefacts
from cupstream2distro.settings import UPLOAD_OUTSIDE_TRUNK_FILENAME_FORMAT


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Prepare package for a specific component to push to a ppa",
                                     epilog="All options can be set by the corresponding long option name env variables as well")

    parser.add_argument("-n", "--sourcename", help="Source package name")
    parser.add_argument("-b", "--branch", help="Branch to use as the upstream source")
    parser.add_argument("-s", "--serie", help="Serie used to build the package")
    parser.add_argument("-p", "--ppa", help="PPA to publish this package to (for instance: 'ubuntu-unity/daily-build')")
    args = parser.parse_args()

    source_package_name = args.sourcename
    branch = args.branch
    serie = args.serie
    ppa = args.ppa
    if not source_package_name:
        source_package_name = os.getenv("sourcename")
    if not branch:
        branch = os.getenv("branch")
    if not serie:
        serie = os.getenv("serie")
    if not ppa:
        ppa = os.getenv("ppa")
    instance_info = "for source: {}, branch: {}, serie: {}".format(source_package_name, branch, serie)

    if not source_package_name or not branch or not serie or not ppa:
        print("ERROR: missing compulsory environment variables (sourcename, branch, serie, ppa) {}".format(instance_info))
        sys.exit(1)

    # Set paperwork
    branchhandling.save_branch_config(source_package_name, branch)

    # Grab project branch
    print("Branching {} to {}".format(branch, source_package_name))
    branchhandling.get_branch(branch, source_package_name)
    os.chdir(source_package_name)

    # Get changelog informations
    print("Get changelog info")
    with open("debian/changelog") as changelog:
        last_upstream_rev = packagemanager.get_latest_upstream_bzr_rev(changelog)
    previous_packaging_version = packagemanager.get_packaging_version()

    if (source_package_name != packagemanager.get_packaging_sourcename()):
        print("ERROR: projectbranch doesn't specify the same source name than the packaging itself {}".format(instance_info))
        sys.exit(1)

    # Check version in distro
    print("Get version available in distro")
    distro_version = packagemanager.get_current_version_for_serie(source_package_name, serie)
    # FIXME: if previous_packaging_version is UNRELEASED and the released version is in distro?
    if packagemanager.is_version1_higher_than_version2(distro_version, previous_packaging_version):
        message = ("A manual upload to distro ({}) has been done for that component but is not in trunk which is still at {}. "
                   "Ignoring that component {}.".format(distro_version, previous_packaging_version, instance_info))
        print(message)
        os.chdir('..')
        generate_xml_artefacts("UploadToDistroOutsideTrunk",  message, UPLOAD_OUTSIDE_TRUNK_FILENAME_FORMAT.format(source_package_name, distro_version))
        # TODO: open a merge proposal with the diff from distro and approve.
        sys.exit(0)

    # Check if new revision to publish
    print("Check if new revision were published")
    tip_bzr_rev = branchhandling.get_tip_bzr_revision()
    # +1 as there is at least an additional automatic commit for latest changelog content of last release.
    if tip_bzr_rev <= last_upstream_rev + 1:
        print("No new revision published since last daily push, no need to upload this component")
        sys.exit(0)

    # Prepare changelog
    print("Prepare changelog content")
    packaging_version = packagemanager.create_new_packaging_version(previous_packaging_version)
    authors_bugs = branchhandling.collect_author_bugs(last_upstream_rev + 1, source_package_name)
    authors_bugs_with_title = launchpadmanager.get_bugs_titles(authors_bugs)
    packagemanager.update_changelog(packaging_version, serie, tip_bzr_rev, authors_bugs_with_title)

    # Prepare if a packaging change is part of the diff
    print("Generate a diff if meaningfull packaging changes")
    branchhandling.generate_diff_in_branch(last_upstream_rev, source_package_name, packaging_version)

    # opens bugs
    print("Sync launchpad with current proposed work")
    branchhandling.commit_release(packaging_version, tip_bzr_rev)
    bugs_set = set()
    for author in authors_bugs:
        bugs_set = bugs_set.union(authors_bugs[author])
    launchpadmanager.open_bugs_for_source(bugs_set, source_package_name, serie)

    print("Build source package and upload to the ppa")
    packagemanager.build_package()
    os.chdir('..')
    packagemanager.upload_package(source_package_name, packaging_version, ppa)


# 1. stop if an intermediate upload has been done to ubuntu but not backported in the packaging branch
# 2. collect all bugs that have been fixed in upstream trunk, and sort them by name in the changelog. The matching is really permissive: wide variety of format either --fixes lp: or in the commit message
# 3. Filters them with the eventual manual cherry-pick upload done in between (don't repeat if already fixed in distro)
# 4. Opens the downstream task automatically, nominate for a serie SRU if not the current one.
# 5. Compute the version with <upstream_version>daily<version>
#    Version would be <upstream_version>daily<yy.mm.dd(.minor)>-0ubuntu1
#    if we already have something delivered today, it will be .minor, then, .minor+1…'
#    this enables 7.0daily12.11.09-0ubuntu2, then the day after 7.0daily12.11.10-0ubuntu1
#    multiple uploads the same day will then be 7.0daily12.11.10.1-0ubuntu1, 7.0daily12.11.10.2-0ubuntu1…
#    if upstream go with 7.0.1, it's still handled thanks to 7.0daily and not 7.0.daily ;) (and so, will give 7.0.1daily12.11.11-0ubuntu1 for instance)
#    Also, boostrapping or directly upload is handled, like 7.2-0ubuntu3, next daily upload will be 7.2daily12.11.15-0ubuntu1
# 6. Prepare a relevant diff if there are some packaging changes, containing packaging changes itselfs as well as
#    autotools and cmake files.
# 8. propose for merging and accept automatically the changelog changes for the day.
# 
# The bug collect doesn't depend on when the changelog commit is merged



# Metrics: number of bugs fixed per stack, per component, which ones…
# TODO: clean the ppa (remove all old unpublished packages)
