#!/usr/bin/python
# -*- coding: UTF8 -*-
# Copyright (C) 2012 Canonical
#
# Authors:
#  Didier Roche
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import glob
import logging
import os
import sys

from cupstream2distro import branchhandling, packagemanager, launchpadmanager
from cupstream2distro.tools import generate_xml_artefacts, get_packaging_diff_filename, save_project_config
from cupstream2distro.settings import PREPARE_ARTEFACTS_FILENAME_FORMAT, BOT_DEBFULLNAME


if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

    parser = argparse.ArgumentParser(description="Prepare package for a specific component to push to a ppa",
                                     epilog="All options can be set by the corresponding long option name env variables as well")

    parser.add_argument("-n", "--sourcename", help="Source package name")
    parser.add_argument("-b", "--branch", help="Branch to use as the upstream source")
    parser.add_argument("-s", "--series", help="Serie used to build the package")
    parser.add_argument("-V", "--series-version", help="set series versions")
    parser.add_argument("-p", "--ppa", help="PPA to publish this package to (for instance: 'ubuntu-unity/daily-build')")
    parser.add_argument("-d", "--destppa", help="Consider this destppa instead of only the distro for finale destination", default='')
    parser.add_argument("-f", "--force-rebuild", help="Force rebuilding even if there is nothing to release", action='store_true')
    parser.add_argument("--condition-force-rebuild", help="Only force rebuild if the conditional file is present (* and other blobs are allowed)", nargs='*')
    parser.add_argument("--skip-checks", help="Skip destination version and conditional checking and call force rebuild", action='store_true')

    args = parser.parse_args()

    source_package_name = args.sourcename
    branch = args.branch
    series = args.series
    series_version = args.series_version
    ppa = args.ppa
    if not source_package_name:
        source_package_name = os.getenv("sourcename")
    if not branch:
        branch = os.getenv("branch")
    if not series:
        series = os.getenv("series")
    if not series_version:
        series = os.getenv("series_version")
    if not ppa:
        ppa = os.getenv("ppa")
    instance_info = "for source: {}, branch: {}, series: {}".format(source_package_name, branch, series)
    force_rebuild = False

    if not source_package_name or not branch or not series or not ppa:
        logging.error("Missing compulsory environment variables (sourcename, branch, series, ppa) {}".format(instance_info))
        sys.exit(1)

    # Grab project branch
    logging.info("Branching {} to {}".format(branch, source_package_name))
    branchhandling.get_branch(branch, source_package_name)
    os.chdir(source_package_name)

    # Get changelog informations
    logging.info("Get changelog info")
    with open("debian/changelog") as changelog:
        last_upstream_rev = packagemanager.get_latest_upstream_bzr_rev(changelog, args.destppa)
    packaging_version_in_bzr = packagemanager.get_packaging_version()

    if (source_package_name != packagemanager.get_packaging_sourcename()):
        logging.error("Projectbranch doesn't specify the same source name than the packaging itself {}".format(instance_info))
        sys.exit(1)

    # Check version in ppa
    logging.info("Get previous version in ppa")
    version_in_ppa = packagemanager.get_current_version_for_series(source_package_name, series, ppa)
    if packagemanager.is_version1_higher_than_version2(version_in_ppa, packaging_version_in_bzr):
        logging.info("A version in the ppa ({}) is higher than the proposed version in bzr ({}) (previous tests/builds failing?). Basing on that one.".format(version_in_ppa, packaging_version_in_bzr))
        previous_packaging_version = version_in_ppa
    else:
        previous_packaging_version = packaging_version_in_bzr

    # Check version in distro
    logging.info("Get version available in distro")
    distro_version = packagemanager.get_current_version_for_series(source_package_name, series)
    artefacts_file = os.path.abspath(os.path.join('..', PREPARE_ARTEFACTS_FILENAME_FORMAT.format(source_package_name)))

    # if the target is the distro, we ensure we have all releases in trunk
    if not args.destppa:
        dest_archive = launchpadmanager.get_ubuntu_archive()
        previous_finaledest_version = distro_version
    # target is a ppa
    else:
        dest_archive = launchpadmanager.get_ppa(args.destppa)
        previous_finaledest_version = packagemanager.get_current_version_for_series(source_package_name, series, args.destppa)
        # TODO: if none, we should maybe take distro_version?

    # ensure that the previous release (in distro or in dest ppa) ended up in the vcs
    if args.skip_checks:
        logging.info("Skip destination version and conditional checking requested. Will overwrite even if destination has a newer version or the (optional) condition isn't met.")
        force_rebuild = True
    else:
        with open("debian/changelog") as changelog:
            if not packagemanager.is_version_in_changelog(previous_finaledest_version, changelog):
                message = ("A version ({}) is available at the destination for that component but is not in trunk which is still at {}. "
                           "Ignoring that component {}.".format(previous_finaledest_version, packaging_version_in_bzr, instance_info))
                logging.info(message)
                generate_xml_artefacts("Prepare",  [message], artefacts_file)
                sys.exit(0)

    if force_rebuild or args.force_rebuild:
        logging.info("The rebuild of that component is forced.")
        force_rebuild = True
    if args.destppa:
        # if the version in the distro is higher than the previous packaging version (either the version in intermediate ppa or packaging bzr version
        # We are going to force releasing, but basing on this version
        if packagemanager.is_version1_higher_than_version2(distro_version, previous_packaging_version):
            logging.info("The version in distro ({}) is higher than what is proposed in the bzr version for that branch ({}). Basing on the distro version.".format(distro_version, previous_packaging_version))
            logging.info("Forcing release mode as the version in distro ({}) is higher than current destination ppa ({})".format(distro_version, previous_packaging_version))
            previous_packaging_version = distro_version
            force_rebuild = True

    # Check if we need to republish
    tip_bzr_rev = branchhandling.get_tip_bzr_revision()
    dest_source_package = None
    logging.info("Check if we need to release a new package")
    os.chdir('..')
    dest_source_package = packagemanager.get_source_package_from_dest(source_package_name, dest_archive, previous_finaledest_version, series)
    # TODO: all paths, on all projects, should have the stack dir as root, and only chdir in the script, not the functions.
    if dest_source_package:
        dest_source_package = os.path.abspath(dest_source_package)
    os.chdir(source_package_name)
    # nothing to release
    if not packagemanager.is_new_content_relevant_since_old_published_source(dest_source_package):
        if not force_rebuild:
            logging.info("No new useful revision published since last daily push, no need to upload this component")
            generate_xml_artefacts("Prepare",  [], artefacts_file)
            sys.exit(0)
        logging.info("No new useful revision published but force rebuilding is set")
        if not args.skip_checks and args.condition_force_rebuild:
            logging.info("Condition found without skip check, verifying that files exists")
            message = []
            for glob_filename in args.condition_force_rebuild:
                glob_found = False
                for filename in glob.glob(os.path.join("..", glob_filename)):
                    if os.path.isfile(filename):
                        glob_found = True
                if not glob_found:
                    msg = "{} doesn't exist".format(glob_filename)
                    logging.info(msg)
                    message.append(msg)
            # exit 0 as the precondition isn't there
            if message:
                generate_xml_artefacts("Prepare",  [], artefacts_file)
                sys.exit(0)

    packaging_version = packagemanager.create_new_packaging_version(previous_packaging_version, destppa=args.destppa, series_version=series_version)

    # Refresh symbol files
    logging.info("Update symbol files version if needed")
    packagemanager.refresh_symbol_files(packaging_version)

    # Prepare changelog
    logging.info("Prepare changelog content")
    log_content = branchhandling.return_log_diff(last_upstream_rev + 1)
    alreadyfixed_bugs = set()
    with open("debian/changelog") as f:
        alreadyfixed_bugs = packagemanager.collect_bugs_in_changelog_until_latest_snapshot(f, source_package_name)
    (authors_commits, bugs_set) = branchhandling.collect_author_commits(log_content, alreadyfixed_bugs)
    if force_rebuild:
        authors_commits[BOT_DEBFULLNAME] = ["New rebuild forced"]
    packagemanager.update_changelog(packaging_version, series, tip_bzr_rev, authors_commits, args.destppa)

    logging.info("Sync launchpad with current proposed work")
    branchhandling.commit_release(packaging_version, tip_bzr_rev)
    launchpadmanager.open_bugs_for_source(bugs_set, source_package_name, series)

    logging.info("Build source package")
    packagemanager.build_source_package(series, previous_finaledest_version, args.destppa)
    os.chdir('..')
    newdsc_path = "{}_{}.dsc".format(source_package_name, packaging_version.split(':')[-1])

    # second diff step: in case the source package was created from nothing (like a diff between trunk and the source package, but none after newly .dsc created extraction)
    if not force_rebuild and dest_source_package:
        logging.info("Check that the newly created source package has relevant diff")
        if not packagemanager.is_relevant_source_diff_from_previous_dest_version(newdsc_path, dest_source_package):
            message = ("There was a diff between trunk and the source package in ubuntu triggering a source package build. However, after that one was created, we diffed again "
                       "between that source in ubuntu and the newly created source extracted and found nothing relevant. Not upload that one then. Please check that the relevant "
                       "diff in the package creation is justified by diffing manually trunk and the source in ubuntu.")
            logging.info(message)
            generate_xml_artefacts("Prepare",  [message], artefacts_file)
            sys.exit(0)

    # We don't do package diff detection for a feature ppa
    if not args.destppa:
        # Prepare if a packaging change is part of the diff
        # FIXME: should be done with debdiff between all and new package
        logging.info("Generate a diff if meaningfull packaging changes")
        diff_filepath = get_packaging_diff_filename(source_package_name, packaging_version)
        olddsc_path = None
        if dest_source_package:
            for file in os.listdir(os.path.dirname(dest_source_package)):
                if file.endswith(".dsc"):
                    olddsc_path = os.path.join(os.path.dirname(dest_source_package), file)
        packagemanager.generate_diff_between_dsc(diff_filepath, olddsc_path, newdsc_path)

    logging.info("Upload to the ppa")
    packagemanager.upload_package(source_package_name, packaging_version, ppa)

    # Save infos for other jobs
    save_project_config(source_package_name, branch, tip_bzr_rev, previous_finaledest_version, packaging_version)

    # generate artefacts
    os.chdir(source_package_name)
    generate_xml_artefacts("Prepare",  [], artefacts_file)

# TODO: clean the ppa (remove all old unpublished packages)
