#! /usr/bin/python
""" Run manually part of a stack in argument
"""
# Copyright (C) 2012, Canonical Ltd (http://www.canonical.com/)
#
# Author: Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>
#
# This software is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
import sys
import yaml
import jenkins
import argparse

BINDIR = os.path.dirname(__file__)
PREFIX = 'cu2d'
DEFAULT_CREDENTIALS = os.path.expanduser('~/.cu2d.cred')
DEFAULT_RELEASE = 'head'


def load_jenkins_credentials(path):
    """ Load Credentials from credentials configuration file """
    if not os.path.exists(path):
        return False

    logging.debug('Loading credentials from %s', path)
    cred = yaml.load(file(path, 'r'))

    for param in ('username', 'password', 'url', 'token'):
        if not param in cred['jenkins']:
            logging.error("Setting missing from jenkins credentials: %s. "
                          "Aborting!", param)
            sys.exit(1)
    return False if not 'jenkins' in cred else cred['jenkins']


def run(jkcfg, stack, release, job, **kwargs):
    """ Force publication of a stack/release

    :param jkcfg: dictionary with the credentials
    :param stack: Name of the stack to publish
    :param release: Name of the release the stack belongs tostack to publish
    :job: support either "publish" or "run" for running steps on a stack
    """
    logging.debug('Logging to Jenkins')
    if 'username' in jkcfg:
        jkh = jenkins.Jenkins(jkcfg['url'],
                                  username=jkcfg['username'],
                                  password=jkcfg['password'])
    else:
        jkh = jenkins.Jenkins(jkcfg['url'])

    jobname = "-".join((PREFIX, stack, release))
    if job == "publish":
        if kwargs['force']:
            args = {'ON_PACKAGES': kwargs['projects'], # optionnally only publish those projects
                    'FORCE_PUBLICATION': 'true'}  # publish even we have packaging changes or other dep stacks failing
        else:
            args = {'ON_PACKAGES': 'foo', # so that this package don't exist
                    'AUTO_PUBLICATION': 'true'} # so that we try a regular publication
    elif job == "run":
        args = {'ON_PACKAGES': kwargs['projects'], # only rebuild those projects
                'CHECK_WITH_WHOLE_PPA': kwargs['check-with-whole-ppa']} # eventually, recheck against full ppa

    if not jkh.job_exists(jobname):
        logging.info("Job '%s' doesn't exists.", jobname)
        return False

    logging.info('Triggering build: %s', jobname)
    jkh.build_job(jobname, args, token=jkcfg['token'])

    return True


def set_logging(debugmode=False):
    """Initialize logging"""
    logging.basicConfig(
        level=logging.DEBUG if debugmode else logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s"
        )
    logging.debug('Debug mode enabled')


def main():
    ''' Main routine '''
    parser = argparse.ArgumentParser(
        description='Run manually a cu2d step')
    parser.add_argument('-C', '--credentials', metavar='CREDENTIALFILE',
                        default=DEFAULT_CREDENTIALS,
                        help='use Jenkins and load credentials from '
                        'CREDENTIAL FILE (default: %s)' % DEFAULT_CREDENTIALS)
    parser.add_argument('-r', '--release',
                        default=DEFAULT_RELEASE,
                        help='Release the stack to publish belongs to '
                        '(default: %s)' % DEFAULT_RELEASE)
    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='enable debug mode')
    parser.add_argument('-f', '--force', action='store_true', default=False,
                        help='Force the publication of a stack (only with -P)')
    parser.add_argument('-P', '--publish', action='store_true', default=False,
                        help='Try a publication of a stack')
    parser.add_argument('-R', '--run', action='store_true', default=False,
                        help='Run a full stack limited to the provided projects')
    parser.add_argument('--check-with-whole-ppa', action='store_true', default=False,
                        help="don't rebuild the current stack, only rerun it with the whole ppa content for the check step")
    parser.add_argument('--really-build-whole-stack', action='store_true', default=False,
                        help="Rebuild the whole stack from scratch.")
    parser.add_argument('stack', help='Name of the stack to publish')
    parser.add_argument('projects', nargs='*', help='Name of the projects (source packages) to rebuild or publish')

    args = parser.parse_args()
    set_logging(args.debug)

    action = None
    args_for_run = {}
    if args.publish:
        action = "publish"
        if not args.force and args.projects:
            logging.error("You can only specify partial projects to publish with the force parameter. Otherwise, use a normal publication.")
            sys.exit(1)
        args_for_run = {'force': args.force}
        if args.projects:
            args_for_run['projects'] = " ".join(args.projects)
    if args.run:
        action = "run"
        if not (args.projects or args.check_with_whole_ppa or args.really_build_whole_stack):
            logging.error(
                'You must specify either a list of projects to build, or '
                '--check-with-whole-ppa, or --really-build-whole-stack. Aborting!')
            sys.exit(1)
        args_for_run = {'projects': " ".join(args.projects), 'check-with-whole-ppa': args.check_with_whole_ppa}

    if not action:
        logging.error('Nor publish or run action given. Aborting!')
        sys.exit(1)

    credentials = None
    if args.credentials:
        credentialsfile = args.credentials
        credentials = load_jenkins_credentials(
            os.path.expanduser(credentialsfile))
        if not credentials:
            logging.error('Credentials not found. Aborting!')
            sys.exit(1)

        if not run(credentials, args.stack, args.release, action, **args_for_run):
            logging.error('Failed to run job. Aborting!')
            sys.exit(2)

if __name__ == "__main__":
    main()
